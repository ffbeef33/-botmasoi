# cogs/game_commands.py
# Module ch·ª©a c√°c l·ªánh slash ƒë·ªÉ qu·∫£n l√Ω game

import discord
from discord import app_commands
from discord.ext import commands
import logging
import traceback
import functools
import asyncio

from game_state import GameState
from views.setup_views import VoiceChannelView
from phases.end_game import reset_game_state, handle_game_end
from phases.voting import check_win_condition
from phases.morning import morning_phase
from phases.night import night_phase
from phases.voting import voting_phase
from utils.api_utils import update_member_cache

logger = logging.getLogger(__name__)

# Decorator ƒë·ªÉ x·ª≠ l√Ω t∆∞∆°ng t√°c v√† l·ªói m·ªôt c√°ch nh·∫•t qu√°n
def handle_interaction(func):
    @functools.wraps(func)
    async def wrapper(self, interaction: discord.Interaction, *args, **kwargs):
        try:
            # Defer ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh timeout
            try:
                # M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã d∆∞·ªõi d·∫°ng c√¥ng khai, tr·ª´ khi c√≥ y√™u c·∫ßu kh√°c
                ephemeral = getattr(func, 'ephemeral', False)
                await interaction.response.defer(ephemeral=ephemeral)
            except Exception as defer_error:
                logger.warning(f"Kh√¥ng th·ªÉ defer t∆∞∆°ng t√°c: {str(defer_error)}")
                # C√≥ th·ªÉ do t∆∞∆°ng t√°c ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω, ti·∫øp t·ª•c th·ª±c hi·ªán h√†m
            
            # G·ªçi h√†m g·ªëc
            return await func(self, interaction, *args, **kwargs)
        except Exception as e:
            # Log l·ªói
            logger.error(f"L·ªói trong {func.__name__}: {str(e)}")
            logger.error(traceback.format_exc())
            
            # G·ª≠i th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng
            try:
                error_embed = discord.Embed(
                    title="‚ùå L·ªói", 
                    description=f"L·ªói khi th·ª±c hi·ªán l·ªánh: {str(e)[:1500]}", 
                    color=discord.Color.red()
                )
                await interaction.followup.send(embed=error_embed, ephemeral=True)
            except:
                if interaction.channel:
                    try:
                        await interaction.channel.send(
                            embed=discord.Embed(
                                title="‚ùå L·ªói",
                                description=f"L·ªói khi x·ª≠ l√Ω l·ªánh: {str(e)[:1500]}",
                                color=discord.Color.red()
                            )
                        )
                    except:
                        pass
            return None
    
    return wrapper

class GameCommands(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.game_states = {}  # L∆∞u tr·ªØ tr·∫°ng th√°i game theo guild_id
    
    def get_game_state(self, guild_id):
        """L·∫•y ho·∫∑c t·∫°o m·ªõi game state cho guild"""
        if guild_id not in self.game_states:
            self.game_states[guild_id] = GameState(guild_id)
        return self.game_states[guild_id]
    
    @app_commands.command(name="start_game", description="B·∫Øt ƒë·∫ßu m·ªôt game Ma S√≥i m·ªõi")
    @handle_interaction
    async def start_game(self, interaction: discord.Interaction):
        if not interaction.guild:
            await interaction.followup.send("L·ªói: L·ªánh n√†y ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong server.", ephemeral=True)
            return
        
        guild_id = interaction.guild.id
        game_state = self.get_game_state(guild_id)
        
        if game_state.is_game_running:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Game ƒëang ch·∫°y tr√™n server n√†y! D√πng `/reset_game` ho·∫∑c `/end_game` ƒë·ªÉ k·∫øt th√∫c game hi·ªán t·∫°i.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
        
        game_state.temp_admin_id = interaction.user.id
        guild = interaction.guild
        
        # T√¨m c√°c k√™nh voice c√≥ ng∆∞·ªùi
        voice_channels = [ch for ch in guild.voice_channels if ch.members]
        
        if not voice_channels:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Kh√¥ng c√≥ k√™nh voice n√†o c√≥ ng∆∞·ªùi ch∆°i! M·ªçi ng∆∞·ªùi c·∫ßn tham gia m·ªôt k√™nh voice tr∆∞·ªõc.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
        
        # C·∫≠p nh·∫≠t member cache
        try:
            member_cache = await update_member_cache(guild, game_state)
            game_state.member_cache = member_cache
        except Exception as e:
            logger.error(f"L·ªói c·∫≠p nh·∫≠t member cache: {str(e)}")
            await interaction.followup.send(f"L·ªói c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi ch∆°i: {str(e)}", ephemeral=True)
            return
        
        embed = discord.Embed(
            title="üéÆ B·∫Øt ƒê·∫ßu Game Ma S√≥i",
            description="Ch·ªçn k√™nh voice ƒë·ªÉ b·∫Øt ƒë·∫ßu game:",
            color=discord.Color.blue()
        )
        
        try:
            await interaction.followup.send(
                embed=embed,
                view=VoiceChannelView(guild, interaction.user.id, self.game_states)
            )
            logger.info(f"Start game command initiated by {interaction.user.id} in guild {guild_id}")
        except Exception as e:
            logger.error(f"L·ªói hi·ªÉn th·ªã VoiceChannelView: {str(e)}")
            await interaction.followup.send(f"L·ªói hi·ªÉn th·ªã m√†n h√¨nh ch·ªçn k√™nh voice: {str(e)}", ephemeral=True)
    
    @app_commands.command(name="pause_game", description="T·∫°m d·ª´ng game")
    @handle_interaction
    async def pause_game(self, interaction: discord.Interaction):
        if not interaction.guild:
            await interaction.followup.send("L·ªói: L·ªánh n√†y ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong server.", ephemeral=True)
            return
            
        guild_id = interaction.guild.id
        
        # Ki·ªÉm tra xem game ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
        if guild_id not in self.game_states:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Ch∆∞a c√≥ game n√†o ƒë·ªÉ t·∫°m d·ª´ng tr√™n server n√†y!",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
            
        game_state = self.game_states[guild_id]
        
        # Ki·ªÉm tra quy·ªÅn h·∫°n
        if not interaction.user.guild_permissions.administrator and interaction.user.id != game_state.temp_admin_id:
            embed = discord.Embed(
                title="‚ùå Quy·ªÅn h·∫°n kh√¥ng ƒë·ªß",
                description="Ch·ªâ admin server ho·∫∑c ng∆∞·ªùi t·∫°o game c√≥ th·ªÉ t·∫°m d·ª´ng game.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
            return
        
        if not game_state.is_game_running:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Ch∆∞a c√≥ game n√†o ƒë·ªÉ t·∫°m d·ª´ng!",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
            
        if game_state.is_game_paused:
            embed = discord.Embed(
                title="‚ùì Th√¥ng b√°o",
                description="Game ƒë√£ ƒëang t·∫°m d·ª´ng r·ªìi! D√πng `/resume_game` ƒë·ªÉ ti·∫øp t·ª•c.",
                color=discord.Color.yellow()
            )
            await interaction.followup.send(embed=embed)
            return
            
        game_state.is_game_paused = True
        logger.info(f"Game paused by {interaction.user.id} on guild {guild_id}")
        
        embed = discord.Embed(
            title="‚è∏Ô∏è Game T·∫°m D·ª´ng",
            description="Game ƒë√£ ƒë∆∞·ª£c t·∫°m d·ª´ng! D√πng `/resume_game` ƒë·ªÉ ti·∫øp t·ª•c.\n\nPhase hi·ªán t·∫°i: " + game_state.phase,
            color=discord.Color.blue()
        )
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="resume_game", description="Ti·∫øp t·ª•c game")
    @handle_interaction
    async def resume_game(self, interaction: discord.Interaction):
        if not interaction.guild:
            await interaction.followup.send("L·ªói: L·ªánh n√†y ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong server.", ephemeral=True)
            return
            
        guild_id = interaction.guild.id
        
        # Ki·ªÉm tra xem game ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
        if guild_id not in self.game_states:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Ch∆∞a c√≥ game n√†o ƒë·ªÉ ti·∫øp t·ª•c tr√™n server n√†y!",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
            
        game_state = self.game_states[guild_id]
        
        # Ki·ªÉm tra quy·ªÅn h·∫°n
        if not interaction.user.guild_permissions.administrator and interaction.user.id != game_state.temp_admin_id:
            embed = discord.Embed(
                title="‚ùå Quy·ªÅn h·∫°n kh√¥ng ƒë·ªß",
                description="Ch·ªâ admin server ho·∫∑c ng∆∞·ªùi t·∫°o game c√≥ th·ªÉ ti·∫øp t·ª•c game.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
            return
            
        if not game_state.is_game_running:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Ch∆∞a c√≥ game n√†o ƒë·ªÉ ti·∫øp t·ª•c!",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
            
        if not game_state.is_game_paused:
            embed = discord.Embed(
                title="‚ùì Th√¥ng b√°o",
                description="Game kh√¥ng ƒëang t·∫°m d·ª´ng! D√πng `/pause_game` ƒë·ªÉ t·∫°m d·ª´ng.",
                color=discord.Color.yellow()
            )
            await interaction.followup.send(embed=embed)
            return
            
        game_state.is_game_paused = False
        logger.info(f"Game resumed by {interaction.user.id} on guild {guild_id}")
        
        embed = discord.Embed(
            title="‚ñ∂Ô∏è Game Ti·∫øp T·ª•c",
            description="Game ƒë√£ ƒë∆∞·ª£c ti·∫øp t·ª•c! Tr√≤ ch∆°i s·∫Ω ti·∫øp t·ª•c t·ª´ pha hi·ªán t·∫°i.",
            color=discord.Color.green()
        )
        await interaction.followup.send(embed=embed)
        
        # Ti·∫øp t·ª•c t·ª´ phase hi·ªán t·∫°i
        try:
            if game_state.phase == "morning":
                await morning_phase(interaction, game_state)
            elif game_state.phase == "night":
                await night_phase(interaction, game_state)
            elif game_state.phase == "voting":
                await voting_phase(interaction, game_state)
        except Exception as e:
            logger.error(f"Error resuming game: {str(e)}")
            traceback.print_exc()
            await interaction.channel.send(f"C√≥ l·ªói khi ti·∫øp t·ª•c game: {str(e)[:100]}...")
    
    @app_commands.command(name="reset_game", description="Kh·ªüi ƒë·ªông l·∫°i game")
    @handle_interaction
    async def reset_game(self, interaction: discord.Interaction):
        if not interaction.guild:
            await interaction.followup.send("L·ªói: L·ªánh n√†y ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong server.", ephemeral=True)
            return
            
        guild_id = interaction.guild.id
        
        # Ki·ªÉm tra xem game ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o ch∆∞a
        if guild_id not in self.game_states:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Ch∆∞a c√≥ game n√†o ƒë·ªÉ reset tr√™n server n√†y!",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
            
        game_state = self.game_states[guild_id]
        
        # Ki·ªÉm tra quy·ªÅn h·∫°n
        if not interaction.user.guild_permissions.administrator and interaction.user.id != game_state.temp_admin_id:
            embed = discord.Embed(
                title="‚ùå Quy·ªÅn h·∫°n kh√¥ng ƒë·ªß",
                description="Ch·ªâ admin server ho·∫∑c ng∆∞·ªùi t·∫°o game c√≥ th·ªÉ reset game.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
            return
            
        if not game_state.is_game_running:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Ch∆∞a c√≥ game n√†o ƒë·ªÉ reset!",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
            
        embed = discord.Embed(
            title="üîÑ Reset Game",
            description="ƒêang reset game...",
            color=discord.Color.blue()
        )
        await interaction.followup.send(embed=embed)
        
        try:
            await reset_game_state(interaction, game_state)
        except Exception as e:
            logger.error(f"L·ªói khi reset game: {str(e)}")
            traceback.print_exc()
            await interaction.channel.send(f"L·ªói khi reset game: {str(e)[:100]}...")
    
    @app_commands.command(name="end_game", description="K·∫øt th√∫c game")
    @handle_interaction
    async def end_game(self, interaction: discord.Interaction):
        if not interaction.guild:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Kh√¥ng th·ªÉ x√°c ƒë·ªãnh server! L·ªánh n√†y ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong server.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
        
        guild_id = interaction.guild.id
        # Ki·ªÉm tra ƒë√∫ng c·∫•u tr√∫c c·ªßa self.game_states
        if not hasattr(self, 'game_states') or guild_id not in self.game_states:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Ch∆∞a c√≥ game n√†o ƒë·ªÉ k·∫øt th√∫c tr√™n server n√†y!",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
            
        game_state = self.game_states[guild_id]
        
        # Ki·ªÉm tra quy·ªÅn h·∫°n
        if not interaction.user.guild_permissions.administrator and interaction.user.id != game_state.temp_admin_id:
            embed = discord.Embed(
                title="‚ùå Quy·ªÅn h·∫°n kh√¥ng ƒë·ªß",
                description="Ch·ªâ admin server ho·∫∑c ng∆∞·ªùi t·∫°o game c√≥ th·ªÉ k·∫øt th√∫c game.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed, ephemeral=True)
            return
            
        # Ki·ªÉm tra c·∫£ hai d·∫°ng truy c·∫≠p tr·∫°ng th√°i game
        is_running = False
        try:
            is_running = game_state.is_game_running
        except AttributeError:
            is_running = game_state.get("is_game_running", False)
            
        if not is_running:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Ch∆∞a c√≥ game n√†o ƒë·ªÉ k·∫øt th√∫c!",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
            
        embed = discord.Embed(
            title="üõë K·∫øt Th√∫c Game",
            description="ƒêang k·∫øt th√∫c game...",
            color=discord.Color.red()
        )
        await interaction.followup.send(embed=embed)
        
        try:
            await handle_game_end(interaction, game_state)
        except Exception as e:
            logger.error(f"L·ªói khi k·∫øt th√∫c game: {str(e)}")
            traceback.print_exc()
            
            # ƒê·∫£m b·∫£o ng∆∞·ªùi d√πng lu√¥n nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi
            try:
                await interaction.followup.send(f"L·ªói khi k·∫øt th√∫c game: {str(e)[:100]}...", ephemeral=True)
            except:
                if interaction.channel:
                    await interaction.channel.send(f"L·ªói khi k·∫øt th√∫c game: {str(e)[:100]}...")
    
    @app_commands.command(name="status", description="Xem tr·∫°ng th√°i game hi·ªán t·∫°i")
    @handle_interaction
    async def status(self, interaction: discord.Interaction):
        if not interaction.guild:
            await interaction.followup.send("L·ªói: L·ªánh n√†y ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong server.", ephemeral=True)
            return
            
        guild_id = interaction.guild.id
        if guild_id not in self.game_states:
            embed = discord.Embed(
                title="Tr·∫°ng th√°i Bot Ma S√≥i",
                description="Ch∆∞a c√≥ game n√†o ƒëang ch·∫°y tr√™n server n√†y.",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
            
        game_state = self.game_states[guild_id]
        embed = discord.Embed(title="Tr·∫°ng th√°i Bot Ma S√≥i", color=discord.Color.green())
        
        # Th√¥ng tin c∆° b·∫£n
        embed.add_field(name="Game ƒëang ch·∫°y", value=str(game_state.is_game_running), inline=False)
        embed.add_field(name="Game ƒëang t·∫°m d·ª´ng", value=str(game_state.is_game_paused), inline=False)
        embed.add_field(name="Pha hi·ªán t·∫°i", value=game_state.phase, inline=False)
        
        # Th√¥ng tin ng∆∞·ªùi ch∆°i
        try:
            alive_count = sum(1 for data in game_state.players.values() if data["status"] in ["alive", "wounded"])
            dead_count = sum(1 for data in game_state.players.values() if data["status"] == "dead")
            embed.add_field(name="Ng∆∞·ªùi ch∆°i", value=f"C√≤n s·ªëng: {alive_count}\nƒê√£ ch·∫øt: {dead_count}", inline=False)
        except Exception as e:
            embed.add_field(name="Ng∆∞·ªùi ch∆°i", value=f"L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i: {str(e)[:100]}", inline=False)
        
        # Th·ªëng k√™ game
        embed.add_field(name="S·ªë ƒë√™m ƒë√£ qua", value=str(game_state.night_count), inline=True)
        
        await interaction.followup.send(embed=embed)
    
    @app_commands.command(name="check_mute", description="Ki·ªÉm tra t√¨nh tr·∫°ng mic")
    @handle_interaction
    async def check_mute(self, interaction: discord.Interaction):
        if not interaction.guild:
            await interaction.followup.send("L·ªói: L·ªánh n√†y ph·∫£i ƒë∆∞·ª£c s·ª≠ d·ª•ng trong server.", ephemeral=True)
            return
            
        guild_id = interaction.guild.id
        if guild_id not in self.game_states:
            embed = discord.Embed(
                title="‚ùå L·ªói",
                description="Ch∆∞a c√≥ game n√†o ƒëang ch·∫°y tr√™n server n√†y!",
                color=discord.Color.red()
            )
            await interaction.followup.send(embed=embed)
            return
            
        game_state = self.game_states[guild_id]
        muted_players = []
        
        for user_id in game_state.players:
            member = game_state.member_cache.get(user_id)
            if member and member.voice and member.voice.mute:
                muted_players.append(f"{member.display_name} (ID: {user_id})")
        
        embed = discord.Embed(
            title="üéôÔ∏è Ki·ªÉm Tra Mic",
            color=discord.Color.blue()
        )
        
        if muted_players:
            embed.description = "Nh·ªØng ng∆∞·ªùi ch∆°i ƒëang b·ªã mute:"
            embed.add_field(name="Ng∆∞·ªùi b·ªã mute", value="\n".join(muted_players), inline=False)
        else:
            embed.description = "Kh√¥ng c√≥ ng∆∞·ªùi ch∆°i n√†o ƒëang b·ªã mute."
        
        await interaction.followup.send(embed=embed)

async def setup(bot):
    try:
        await bot.add_cog(GameCommands(bot))
        logger.info("ƒê√£ th√™m cog GameCommands")
        
        # Kh√¥ng ƒë·ªìng b·ªô l·ªánh ·ªü ƒë√¢y - s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán trong on_ready
        # B·ªè d√≤ng: await bot.tree.sync()
    except Exception as e:
        logger.error(f"L·ªói khi th√™m cog GameCommands: {str(e)}")
        traceback.print_exc()