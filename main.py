# main.py
# ƒêi·ªÉm kh·ªüi ƒë·∫ßu c·ªßa ·ª©ng d·ª•ng bot

import os
import discord
import logging
import sys
import traceback
import asyncio
from discord.ext import commands

from config import DISCORD_TOKEN, logger
from db import init_database

# Kh·ªüi t·∫°o bot v·ªõi c√°c intents c·∫ßn thi·∫øt
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.voice_states = True
intents.guilds = True

bot = commands.Bot(command_prefix='!', intents=intents, help_command=None)

@bot.event
async def on_ready():
    """Event ƒë∆∞·ª£c g·ªçi khi bot ƒëƒÉng nh·∫≠p th√†nh c√¥ng"""
    logger.info(f"Bot ƒë√£ s·∫µn s√†ng v·ªõi t√™n {bot.user}")
    print(f"Bot ƒë√£ s·∫µn s√†ng v·ªõi t√™n {bot.user}")
    
    # Hi·ªÉn th·ªã th√¥ng tin commands tr∆∞·ªõc khi sync
    print("Commands in tree before sync:")
    for command in bot.tree.get_commands():
        print(f"- {command.name}")
        
    # Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu n·∫øu c·∫ßn
    init_database()
    logger.info("Database initialized")
    
    # ƒê·ªìng b·ªô commands
    await bot.tree.sync()
    logger.info("Command tree synced")
    
    # Hi·ªÉn th·ªã th√¥ng tin k·∫øt n·ªëi
    guild_count = len(bot.guilds)
    print(f"Bot ƒëang ho·∫°t ƒë·ªông tr√™n {guild_count} server")
    logger.info(f"Bot ƒëang ho·∫°t ƒë·ªông tr√™n {guild_count} server")
    
    # Thi·∫øt l·∫≠p tr·∫°ng th√°i
    await bot.change_presence(
        activity=discord.Activity(
            type=discord.ActivityType.playing,
            name="Ma S√≥i | /help_masoi"
        )
    )

@bot.event
async def on_guild_join(guild):
    """Event ƒë∆∞·ª£c g·ªçi khi bot tham gia server m·ªõi"""
    logger.info(f"Bot ƒë√£ tham gia guild m·ªõi: {guild.name} (ID: {guild.id})")
    
    # T√¨m k√™nh th√≠ch h·ª£p ƒë·ªÉ g·ª≠i th√¥ng b√°o
    channel = None
    for ch in guild.text_channels:
        if ch.permissions_for(guild.me).send_messages:
            channel = ch
            break
    
    if channel:
        embed = discord.Embed(
            title="üê∫ Ch√†o M·ª´ng ƒê·∫øn V·ªõi Bot Ma S√≥i DeWolfVie!",
            description=(
                "C·∫£m ∆°n ƒë√£ th√™m bot Ma S√≥i v√†o server c·ªßa b·∫°n!\n\n"
                "‚Ä¢ S·ª≠ d·ª•ng `/help_masoi` ƒë·ªÉ xem h∆∞·ªõng d·∫´n s·ª≠ d·ª•ng\n"
                "‚Ä¢ S·ª≠ d·ª•ng `/start_game` ƒë·ªÉ b·∫Øt ƒë·∫ßu m·ªôt game m·ªõi\n"
                "‚Ä¢ S·ª≠ d·ª•ng `/roles_list` ƒë·ªÉ xem danh s√°ch vai tr√≤\n\n"
                "Ch√∫c b·∫°n v√† server c√≥ nh·ªØng tr·∫£i nghi·ªám game vui v·∫ª!"
            ),
            color=discord.Color.blue()
        )
        embed.set_footer(text="DeWolfVie ver 5.15")
        await channel.send(embed=embed)

@bot.event
async def on_voice_state_update(member, before, after):
    """Event ƒë∆∞·ª£c g·ªçi khi tr·∫°ng th√°i voice c·ªßa ng∆∞·ªùi d√πng thay ƒë·ªïi"""
    # N·∫øu bot ƒëang trong k√™nh voice v√† kh√¥ng c√≤n ng∆∞·ªùi n√†o kh√°c, bot s·∫Ω r·ªùi k√™nh
    if before.channel and bot.user in before.channel.members:
        # ƒê·∫øm s·ªë ng∆∞·ªùi trong k√™nh (tr·ª´ bot)
        human_count = sum(1 for m in before.channel.members if not m.bot)
        
        if human_count == 0:
            # T√¨m voice client trong k√™nh n√†y
            for vc in bot.voice_clients:
                if vc.channel == before.channel:
                    logger.info(f"Disconnecting from empty voice channel: {before.channel.name}")
                    await vc.disconnect()
                    break

@bot.event
async def on_command_error(ctx, error):
    """X·ª≠ l√Ω l·ªói commands c≈© (prefix commands)"""
    if isinstance(error, commands.CommandNotFound):
        return
        
    logger.error(f"Command error: {str(error)}")
    await ctx.send(f"L·ªói: {str(error)}")

@bot.event
async def on_app_command_error(interaction: discord.Interaction, error):
    """X·ª≠ l√Ω l·ªói app commands (slash commands)"""
    error_message = f"L·ªói khi th·ª±c hi·ªán l·ªánh: {str(error)}"
    logger.error(f"App command error: {str(error)}")
    traceback.print_exception(type(error), error, error.__traceback__, file=sys.stderr)
    
    if interaction.response.is_done():
        await interaction.followup.send(error_message, ephemeral=True)
    else:
        await interaction.response.send_message(error_message, ephemeral=True)

async def load_extensions():
    """Load t·∫•t c·∫£ c√°c extensions/cogs cho bot"""
    extensions = [
        'cogs.game_commands',
        'cogs.info_commands',
    ]
    
    for extension in extensions:
        try:
            await bot.load_extension(extension)
            logger.info(f"ƒê√£ t·∫£i extension: {extension}")
        except Exception as e:
            logger.error(f"L·ªói khi t·∫£i extension {extension}: {str(e)}")
            traceback.print_exc()

async def start_bot():
    """H√†m kh·ªüi ƒë·ªông bot an to√†n"""
    try:
        # T·∫£i c√°c extensions tr∆∞·ªõc
        await load_extensions()
        
        # Ch·∫°y bot
        await bot.start(DISCORD_TOKEN)
        return True
    except discord.errors.LoginFailure:
        logger.critical("Bot kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p. Token kh√¥ng h·ª£p l·ªá!")
        print("Error: Invalid token. Bot couldn't login.")
        return False
    except Exception as e:
        logger.critical(f"L·ªói kh√¥ng x√°c ƒë·ªãnh khi kh·ªüi ƒë·ªông bot: {str(e)}")
        print(f"Error starting bot: {str(e)}")
        traceback.print_exc()
        return False

# ƒêi·ªÉm kh·ªüi ƒë·∫ßu ch∆∞∆°ng tr√¨nh
if __name__ == "__main__":
    print("Starting Ma S√≥i bot...")
    
    # Setup event loop v√† ch·∫°y bot
    try:
        # C√†i ƒë·∫∑t policy ƒë·∫∑c bi·ªát cho Windows n·∫øu c·∫ßn
        if sys.platform == 'win32':
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        
        # Ch·∫°y bot trong event loop
        try:
            loop = asyncio.get_running_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
        success = loop.run_until_complete(start_bot())
        
        if not success:
            print("Bot failed to start properly. Check logs for details.")
            sys.exit(1)
    except KeyboardInterrupt:
        print("Bot shutdown by user")
    except Exception as e:
        print(f"Unhandled error: {str(e)}")
        logger.critical(f"Unhandled error: {str(e)}")
        traceback.print_exc()
        sys.exit(1)