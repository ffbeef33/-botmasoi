# views/voting_views.py
# UI Components cho vi·ªác b·ªè phi·∫øu

import discord
import logging
from typing import List, Dict, Optional

from constants import NO_NIGHT_ACTION_ROLES

logger = logging.getLogger(__name__)

class VoteView(discord.ui.View):
    """View cho vi·ªác b·ªè phi·∫øu ban ng√†y"""
    def __init__(self, alive_players, game_state, timeout=45):
        super().__init__(timeout=timeout)
        self.alive_players = alive_players
        self.game_state = game_state
        self.add_item(VoteSelect(alive_players, game_state))
        self.add_item(SkipButton(game_state))

class VoteSelect(discord.ui.Select):
    """Select menu cho vi·ªác b·ªè phi·∫øu"""
    def __init__(self, alive_players, game_state):
        options = [
            discord.SelectOption(
                label=member.display_name[:25], 
                value=str(member.id),
                description=f"ID: {member.id % 10000}"
            )
            for member in alive_players
        ]
        super().__init__(placeholder="Ch·ªçn ng∆∞·ªùi ƒë·ªÉ lo·∫°i", options=options, min_values=1, max_values=1)
        self.game_state = game_state

    async def callback(self, interaction: discord.Interaction):
        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán c∆° b·∫£n
        if interaction.user.id not in self.game_state["players"] or self.game_state["players"][interaction.user.id]["status"] not in ["alive", "wounded"]:
            await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ b·ªè phi·∫øu!", ephemeral=True)
            return
            
        if self.game_state["phase"] != "voting":
            await interaction.response.send_message("Ch∆∞a ph·∫£i pha b·ªè phi·∫øu!", ephemeral=True)
            return
            
        if self.game_state["is_game_paused"]:
            await interaction.response.send_message("Game ƒëang t·∫°m d·ª´ng, kh√¥ng th·ªÉ b·ªè phi·∫øu!", ephemeral=True)
            return

        # Ghi nh·∫≠n phi·∫øu b·∫ßu
        target_id = int(self.values[0])
        self.game_state["votes"][interaction.user.id] = target_id
        
        target_member = next((m for m in self.options if m.value == self.values[0]), None)
        target_name = target_member.label if target_member else "Unknown"

        # Ki·ªÉm tra ƒëi·ªÅu ki·ªán ƒë·ªÉ hi·ªÉn th·ªã th√¥ng b√°o ph√π h·ª£p
        player_data = self.game_state["players"][interaction.user.id]
        
        # Ng∆∞·ªùi ch∆°i ƒë·ªß ƒëi·ªÅu ki·ªán n·∫øu: vai tr√≤ kh√¥ng y√™u c·∫ßu to√°n HO·∫∂C ƒë√£ gi·∫£i to√°n ƒë√∫ng
        if player_data["role"] not in NO_NIGHT_ACTION_ROLES or (interaction.user.id in self.game_state["math_results"] and self.game_state["math_results"][interaction.user.id]):
            embed = discord.Embed(
                title="üó≥Ô∏è Phi·∫øu B·∫ßu ƒê√£ Ghi Nh·∫≠n",
                description=f"B·∫°n ƒë√£ b·ªè phi·∫øu cho **{target_name}**!",
                color=discord.Color.blue()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        else:
            embed = discord.Embed(
                title="üó≥Ô∏è Phi·∫øu B·∫ßu Kh√¥ng H·ª£p L·ªá",
                description=f"B·∫°n ƒë√£ b·ªè phi·∫øu cho **{target_name}**, nh∆∞ng phi·∫øu c·ªßa b·∫°n kh√¥ng ƒë∆∞·ª£c t√≠nh do kh√¥ng gi·∫£i ƒë√∫ng b√†i to√°n!",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            
        logger.info(f"Player {interaction.user.id} voted for {target_id} ({target_name})")

class SkipButton(discord.ui.Button):
    """Button ƒë·ªÉ b·ªè qua vote"""
    def __init__(self, game_state):
        super().__init__(label="B·ªè qua", style=discord.ButtonStyle.grey)
        self.game_state = game_state

    async def callback(self, interaction: discord.Interaction):
        if interaction.user.id not in self.game_state["players"] or self.game_state["players"][interaction.user.id]["status"] not in ["alive", "wounded"]:
            await interaction.response.send_message("B·∫°n kh√¥ng th·ªÉ b·ªè phi·∫øu!", ephemeral=True)
            return
            
        if self.game_state["phase"] != "voting":
            await interaction.response.send_message("Ch∆∞a ph·∫£i pha b·ªè phi·∫øu!", ephemeral=True)
            return
            
        if self.game_state["is_game_paused"]:
            await interaction.response.send_message("Game ƒëang t·∫°m d·ª´ng, kh√¥ng th·ªÉ b·ªè phi·∫øu!", ephemeral=True)
            return
            
        if interaction.user.id in self.game_state["math_results"] and not self.game_state["math_results"][interaction.user.id]:
            embed = discord.Embed(
                title="üó≥Ô∏è Kh√¥ng Th·ªÉ B·ªè Phi·∫øu",
                description="B·∫°n kh√¥ng c√≥ quy·ªÅn b·ªè phi·∫øu do tr·∫£ l·ªùi sai b√†i to√°n ƒë√™m qua!",
                color=discord.Color.red()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
            
        self.game_state["votes"][interaction.user.id] = "skip"
        
        embed = discord.Embed(
            title="üó≥Ô∏è B·ªè Qua B·ªè Phi·∫øu",
            description="B·∫°n ƒë√£ ch·ªçn b·ªè qua vi·ªác b·ªè phi·∫øu trong l∆∞·ª£t n√†y.",
            color=discord.Color.blue()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        logger.info(f"Player {interaction.user.id} skipped voting")

class GameEndView(discord.ui.View):
    """View cho t√πy ch·ªçn khi game k·∫øt th√∫c"""
    def __init__(self, admin_id, interaction, game_state):
        super().__init__(timeout=60)
        self.admin_id = admin_id
        self.interaction = interaction
        self.game_state = game_state

    @discord.ui.button(label="Start New Game", style=discord.ButtonStyle.green)
    async def start_new_game(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.admin_id:
            await interaction.response.send_message("Ch·ªâ ng∆∞·ªùi ch·∫°y l·ªánh /start_game ƒë∆∞·ª£c thao t√°c!", ephemeral=True)
            return
            
        embed = discord.Embed(
            title="üéÆ B·∫Øt ƒê·∫ßu Game M·ªõi",
            description="ƒêang kh·ªüi t·∫°o game m·ªõi v·ªõi c√πng ng∆∞·ªùi ch∆°i v√† vai tr√≤...",
            color=discord.Color.green()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
        # Import h√†m kh·ªüi ƒë·ªông game m·ªõi ·ªü ƒë√¢y ƒë·ªÉ tr√°nh circular import
        from phases.game_setup import start_new_game_with_same_setup
        await start_new_game_with_same_setup(self.interaction, self.game_state)

    @discord.ui.button(label="End Game", style=discord.ButtonStyle.red)
    async def end_game(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user.id != self.admin_id:
            await interaction.response.send_message("Ch·ªâ ng∆∞·ªùi ch·∫°y l·ªánh /start_game ƒë∆∞·ª£c thao t√°c!", ephemeral=True)
            return
            
        embed = discord.Embed(
            title="üõë K·∫øt Th√∫c Game",
            description="Game ƒë√£ k·∫øt th√∫c ho√†n to√†n.",
            color=discord.Color.red()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
        # Reset game state
        self.game_state["temp_players"] = []
        self.game_state["temp_roles"] = {role: 0 for role in self.game_state["temp_roles"].keys()}
        self.game_state["temp_admin_id"] = None
        self.game_state["voice_channel_id"] = None
        self.game_state["guild_id"] = None
        self.game_state["text_channel"] = None
        self.game_state["member_cache"].clear()
        
        logger.info(f"Game ended by admin {interaction.user.id}")