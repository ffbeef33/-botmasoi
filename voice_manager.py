# utils/voice_manager.py
# Qu·∫£n l√Ω k·∫øt n·ªëi voice v√† t·ª± ƒë·ªông k·∫øt n·ªëi l·∫°i

import discord
import asyncio
import logging
from typing import Dict, Optional

logger = logging.getLogger(__name__)

class VoiceManager:
    """L·ªõp qu·∫£n l√Ω c√°c k·∫øt n·ªëi voice c·ªßa bot"""
    
    def __init__(self, bot):
        self.bot = bot
        self.voice_connections: Dict[int, discord.VoiceClient] = {}
        self.keepalive_tasks: Dict[int, asyncio.Task] = {}
        self.channel_ids: Dict[int, int] = {}  # L∆∞u channel id ƒë·ªÉ k·∫øt n·ªëi l·∫°i
        self.game_states = {}  # Tham chi·∫øu ƒë·∫øn game_states
        
    def set_game_states_reference(self, game_states):
        """Thi·∫øt l·∫≠p tham chi·∫øu ƒë·∫øn game_states"""
        self.game_states = game_states
        
    async def connect_to_voice(self, voice_channel, guild_id):
        """
        K·∫øt n·ªëi ƒë·∫øn k√™nh voice v√† thi·∫øt l·∫≠p gi·ªØ k·∫øt n·ªëi
        
        Args:
            voice_channel (discord.VoiceChannel): K√™nh voice c·∫ßn k·∫øt n·ªëi
            guild_id (int): ID c·ªßa guild
        
        Returns:
            discord.VoiceClient: K·∫øt n·ªëi voice ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p
        """
        try:
            # Ng·∫Øt k·∫øt n·ªëi c≈© n·∫øu c√≥
            if guild_id in self.voice_connections and self.voice_connections[guild_id].is_connected():
                await self.voice_connections[guild_id].disconnect(force=True)
                logger.info(f"ƒê√£ ng·∫Øt k·∫øt n·ªëi voice c≈© trong guild {guild_id}")
            
            # Th·ª≠ k·∫øt n·ªëi
            voice_client = await voice_channel.connect(timeout=10.0, reconnect=True)
            
            # L∆∞u th√¥ng tin
            self.voice_connections[guild_id] = voice_client
            self.channel_ids[guild_id] = voice_channel.id
            
            # B·∫Øt ƒë·∫ßu task gi·ªØ k·∫øt n·ªëi
            self._start_keepalive(guild_id)
            
            logger.info(f"K·∫øt n·ªëi th√†nh c√¥ng ƒë·∫øn k√™nh voice {voice_channel.name} (ID: {voice_channel.id}) trong guild {guild_id}")
            return voice_client
            
        except Exception as e:
            logger.error(f"L·ªói khi k·∫øt n·ªëi ƒë·∫øn k√™nh voice: {e}")
            return None
    
    async def disconnect(self, guild_id):
        """Ng·∫Øt k·∫øt n·ªëi voice t·ª´ guild"""
        if guild_id in self.voice_connections and self.voice_connections[guild_id].is_connected():
            # D·ª´ng task gi·ªØ k·∫øt n·ªëi
            self._stop_keepalive(guild_id)
            
            # Ng·∫Øt k·∫øt n·ªëi
            await self.voice_connections[guild_id].disconnect()
            
            # X√≥a th√¥ng tin
            del self.voice_connections[guild_id]
            if guild_id in self.channel_ids:
                del self.channel_ids[guild_id]
                
            logger.info(f"ƒê√£ ng·∫Øt k·∫øt n·ªëi voice t·ª´ guild {guild_id}")
            return True
        return False
    
    def _start_keepalive(self, guild_id):
        """B·∫Øt ƒë·∫ßu task gi·ªØ k·∫øt n·ªëi cho guild"""
        if guild_id in self.keepalive_tasks and not self.keepalive_tasks[guild_id].done():
            self.keepalive_tasks[guild_id].cancel()
        
        self.keepalive_tasks[guild_id] = asyncio.create_task(self._keepalive_loop(guild_id))
        logger.debug(f"ƒê√£ b·∫Øt ƒë·∫ßu task gi·ªØ k·∫øt n·ªëi cho guild {guild_id}")
    
    def _stop_keepalive(self, guild_id):
        """D·ª´ng task gi·ªØ k·∫øt n·ªëi cho guild"""
        if guild_id in self.keepalive_tasks and not self.keepalive_tasks[guild_id].done():
            self.keepalive_tasks[guild_id].cancel()
            logger.debug(f"ƒê√£ d·ª´ng task gi·ªØ k·∫øt n·ªëi cho guild {guild_id}")
    
    async def _keepalive_loop(self, guild_id):
        """Loop gi·ªØ k·∫øt n·ªëi voice"""
        try:
            while True:
                await asyncio.sleep(20)  # Ki·ªÉm tra m·ªói 20 gi√¢y
                
                if guild_id not in self.voice_connections:
                    logger.debug(f"Guild {guild_id} kh√¥ng c√≤n trong danh s√°ch k·∫øt n·ªëi voice, d·ª´ng keepalive")
                    break
                    
                voice_client = self.voice_connections[guild_id]
                
                # Ki·ªÉm tra n·∫øu k·∫øt n·ªëi ƒë√£ b·ªã ng·∫Øt
                if not voice_client or not voice_client.is_connected():
                    logger.warning(f"Ph√°t hi·ªán m·∫•t k·∫øt n·ªëi voice trong guild {guild_id}, ƒëang th·ª≠ k·∫øt n·ªëi l·∫°i")
                    await self._attempt_reconnect(guild_id)
                    
        except asyncio.CancelledError:
            logger.debug(f"Task gi·ªØ k·∫øt n·ªëi cho guild {guild_id} ƒë√£ b·ªã h·ªßy")
        except Exception as e:
            logger.error(f"L·ªói trong task gi·ªØ k·∫øt n·ªëi cho guild {guild_id}: {e}")
    
    async def _attempt_reconnect(self, guild_id):
        """Th·ª≠ k·∫øt n·ªëi l·∫°i khi m·∫•t k·∫øt n·ªëi"""
        # Ki·ªÉm tra xem c√≥ th√¥ng tin k√™nh kh√¥ng
        if guild_id not in self.channel_ids:
            logger.error(f"Kh√¥ng c√≥ th√¥ng tin k√™nh voice ƒë·ªÉ k·∫øt n·ªëi l·∫°i cho guild {guild_id}")
            return False
            
        try:
            # L·∫•y th√¥ng tin k√™nh
            channel_id = self.channel_ids[guild_id]
            channel = self.bot.get_channel(channel_id)
            
            if not channel:
                logger.error(f"Kh√¥ng t√¨m th·∫•y k√™nh voice {channel_id} trong guild {guild_id}")
                return False
                
            # K·∫øt n·ªëi l·∫°i
            voice_client = await channel.connect(timeout=10.0, reconnect=True)
            self.voice_connections[guild_id] = voice_client
            
            # C·∫≠p nh·∫≠t game_state n·∫øu ƒëang c√≥ game ch·∫°y
            if guild_id in self.game_states and self.game_states[guild_id].get("is_game_running"):
                game_state = self.game_states[guild_id]
                game_state["voice_connection"] = voice_client
                
                # Th√¥ng b√°o trong k√™nh text n·∫øu c√≥
                if game_state.get("text_channel"):
                    await game_state["text_channel"].send("üîÑ Bot ƒë√£ k·∫øt n·ªëi l·∫°i k√™nh voice sau khi b·ªã ng·∫Øt k·∫øt n·ªëi!")
            
            logger.info(f"ƒê√£ k·∫øt n·ªëi l·∫°i th√†nh c√¥ng ƒë·∫øn k√™nh voice {channel.name} trong guild {guild_id}")
            return True
            
        except Exception as e:
            logger.error(f"L·ªói khi th·ª≠ k·∫øt n·ªëi l·∫°i k√™nh voice trong guild {guild_id}: {e}")
            return False
            
    async def handle_voice_state_update(self, member, before, after):
        """X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi tr·∫°ng th√°i voice"""
        # X·ª≠ l√Ω khi bot b·ªã ng·∫Øt k·∫øt n·ªëi
        if member.id == self.bot.user.id and before.channel and not after.channel:
            guild_id = before.channel.guild.id
            logger.warning(f"Bot b·ªã ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh voice trong guild {guild_id}")
            
            # Ki·ªÉm tra n·∫øu ƒëang c√≥ game ch·∫°y
            if guild_id in self.game_states and self.game_states[guild_id].get("is_game_running"):
                logger.info(f"ƒêang c√≥ game ch·∫°y trong guild {guild_id}, th·ª≠ k·∫øt n·ªëi l·∫°i")
                await self._attempt_reconnect(guild_id)
                
        # X·ª≠ l√Ω khi kh√¥ng c√≤n ng∆∞·ªùi trong k√™nh (ngo√†i bot)
        elif before.channel and member.id != self.bot.user.id:
            if before.channel.members and len([m for m in before.channel.members if not m.bot]) == 0:
                guild_id = before.channel.guild.id
                
                # Kh√¥ng t·ª± ƒë·ªông ng·∫Øt k·∫øt n·ªëi n·∫øu ƒëang c√≥ game ch·∫°y
                if guild_id in self.game_states and self.game_states[guild_id].get("is_game_running"):
                    logger.debug(f"Kh√¥ng ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh tr·ªëng v√¨ game ƒëang ch·∫°y trong guild {guild_id}")
                    return
                    
                # Ng·∫Øt k·∫øt n·ªëi n·∫øu kh√¥ng c√≤n ng∆∞·ªùi trong k√™nh v√† kh√¥ng c√≥ game ch·∫°y
                voice_client = discord.utils.get(self.bot.voice_clients, guild=before.channel.guild)
                if voice_client and voice_client.channel == before.channel:
                    logger.info(f"Ng·∫Øt k·∫øt n·ªëi kh·ªèi k√™nh tr·ªëng {before.channel.name} trong guild {guild_id}")
                    await voice_client.disconnect()